{
    "pipes": [],
    "interfaces": [
        {
            "name": "File",
            "id": "interface-File-5b4db469ba71151bbd079379b17288a0eda3e30918597c984532323dd982fe8624e11ba23e27f380ef8613bb27348e05c37f21795c32731d855c04fccb8b011f",
            "file": "src/app/modules/utilities/interfaces/Node.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Node {\r\n  name: string,\r\n  nodes?: Node[],\r\n  isDirectory: boolean,\r\n  expanded: boolean,\r\n  path: string\r\n}\r\n\r\nexport const DEFAULT_NODE: Node = {\r\n  name: \"notes\",\r\n  nodes: [],\r\n  isDirectory: false,\r\n  expanded: false,\r\n  path: \".\"\r\n}\r\n\r\nexport interface FileSystemItem {\r\n  file_name: string,\r\n  is_folder: boolean\r\n}\r\n\r\nexport interface File {\r\n  content: any\r\n}\r\n\r\nexport function mapFileSystemItem2Node(fileSystemItem: FileSystemItem, path?: string): Node {\r\n  return { ...DEFAULT_NODE, name: fileSystemItem.file_name, isDirectory: fileSystemItem.is_folder, path: path?.concat(\"\\\\\",fileSystemItem.file_name) } as Node;\r\n}\r\nexport function mapFileSystemItem2NodeList(fileSystemItem: FileSystemItem[], parent_node?: string): Node[] {\r\n  return fileSystemItem\r\n    .map((item) => mapFileSystemItem2Node(item, parent_node))\r\n    .sort((a, b) => a.name.localeCompare(b.name)).sort((a, b) => Number(b.isDirectory) - Number(a.isDirectory));;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FileSystemItem",
            "id": "interface-FileSystemItem-5b4db469ba71151bbd079379b17288a0eda3e30918597c984532323dd982fe8624e11ba23e27f380ef8613bb27348e05c37f21795c32731d855c04fccb8b011f",
            "file": "src/app/modules/utilities/interfaces/Node.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Node {\r\n  name: string,\r\n  nodes?: Node[],\r\n  isDirectory: boolean,\r\n  expanded: boolean,\r\n  path: string\r\n}\r\n\r\nexport const DEFAULT_NODE: Node = {\r\n  name: \"notes\",\r\n  nodes: [],\r\n  isDirectory: false,\r\n  expanded: false,\r\n  path: \".\"\r\n}\r\n\r\nexport interface FileSystemItem {\r\n  file_name: string,\r\n  is_folder: boolean\r\n}\r\n\r\nexport interface File {\r\n  content: any\r\n}\r\n\r\nexport function mapFileSystemItem2Node(fileSystemItem: FileSystemItem, path?: string): Node {\r\n  return { ...DEFAULT_NODE, name: fileSystemItem.file_name, isDirectory: fileSystemItem.is_folder, path: path?.concat(\"\\\\\",fileSystemItem.file_name) } as Node;\r\n}\r\nexport function mapFileSystemItem2NodeList(fileSystemItem: FileSystemItem[], parent_node?: string): Node[] {\r\n  return fileSystemItem\r\n    .map((item) => mapFileSystemItem2Node(item, parent_node))\r\n    .sort((a, b) => a.name.localeCompare(b.name)).sort((a, b) => Number(b.isDirectory) - Number(a.isDirectory));;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "file_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "is_folder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Node",
            "id": "interface-Node-5b4db469ba71151bbd079379b17288a0eda3e30918597c984532323dd982fe8624e11ba23e27f380ef8613bb27348e05c37f21795c32731d855c04fccb8b011f",
            "file": "src/app/modules/utilities/interfaces/Node.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Node {\r\n  name: string,\r\n  nodes?: Node[],\r\n  isDirectory: boolean,\r\n  expanded: boolean,\r\n  path: string\r\n}\r\n\r\nexport const DEFAULT_NODE: Node = {\r\n  name: \"notes\",\r\n  nodes: [],\r\n  isDirectory: false,\r\n  expanded: false,\r\n  path: \".\"\r\n}\r\n\r\nexport interface FileSystemItem {\r\n  file_name: string,\r\n  is_folder: boolean\r\n}\r\n\r\nexport interface File {\r\n  content: any\r\n}\r\n\r\nexport function mapFileSystemItem2Node(fileSystemItem: FileSystemItem, path?: string): Node {\r\n  return { ...DEFAULT_NODE, name: fileSystemItem.file_name, isDirectory: fileSystemItem.is_folder, path: path?.concat(\"\\\\\",fileSystemItem.file_name) } as Node;\r\n}\r\nexport function mapFileSystemItem2NodeList(fileSystemItem: FileSystemItem[], parent_node?: string): Node[] {\r\n  return fileSystemItem\r\n    .map((item) => mapFileSystemItem2Node(item, parent_node))\r\n    .sort((a, b) => a.name.localeCompare(b.name)).sort((a, b) => Number(b.isDirectory) - Number(a.isDirectory));;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isDirectory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node[]",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NotepadEvents",
            "id": "interface-NotepadEvents-1a1c0d86bb7fe14623d651cadfb9ec21488f2363208adc36fa60b14df07945e03c9348f6eead1b86e22d4ada1c411ea492db5761207bcfb8ca52ae04340faa3b",
            "file": "src/app/modules/utilities/interfaces/Events.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NotepadEvents {\r\n  file_name?:string,\r\n  path?: string | undefined,\r\n  data?: string\r\n  type: AppEvents\r\n}\r\n\r\nexport enum AppEvents {\r\n  TAB_CHANGE,\r\n  TAB_CREATE,\r\n  TAB_DELETE,\r\n  TABS_EMPTY,\r\n  WORKPAD_UPDATE,\r\n  WORKPAD_SAVE_REQUEST,\r\n  WORKPAD_SAVE_RESPONSE,\r\n  FILE_SYSTEM_OPEN,\r\n  FILE_SYSTEM_READ\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "file_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppEvents",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Tab",
            "id": "interface-Tab-c2daddeee09c309c904668d6fd71395d1e60f6f1f4674d2fc9c9d9e7e093c521556e52836f20758f3c74e52b768b581fb05dda7a6cee7193f74c522210b2965c",
            "file": "src/app/modules/utilities/interfaces/Tab.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Tab{\r\n  id: number,\r\n  title: string,\r\n  isClosable: boolean,\r\n  selected: boolean,\r\n  path: string\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isClosable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "FolderTreeService",
            "id": "injectable-FolderTreeService-84097bb0ba53e3058ad07bb67bb836c8a17cc591d1b780d6f4551e5ee70349acf9daf8377a39607d3c1a350ff9c0367eb39620cee048f84c015d85e2cd4e43f5",
            "file": "src/app/modules/ui-elements/folder-tree/folder-tree.service.ts",
            "properties": [
                {
                    "name": "BASE_PATH",
                    "defaultValue": "environment.current_directory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fileDirectoryStructure",
                    "defaultValue": "new BehaviorSubject<Node[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "ROOT_NAME",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "rootNode",
                    "defaultValue": "new BehaviorSubject<Node>(DEFAULT_NODE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "expandDirectory",
                    "args": [
                        {
                            "name": "folder",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReads the contents of the directory and append to the exsisting structure\n",
                    "description": "<p>Reads the contents of the directory and append to the exsisting structure</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1747,
                                "end": 1753,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "folder"
                            },
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1741,
                                "end": 1746,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Node for which the subfolders and files needs to be read</p>\n"
                        }
                    ]
                },
                {
                    "name": "initialize_Explorer",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.BASE_PATH"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe path to load on the file-explorer .TODO: Ideally this should come from the Input variable but as for now this works :p\n",
                    "description": "<p>The path to load on the file-explorer .TODO: Ideally this should come from the Input variable but as for now this works :p</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 791,
                                "end": 795,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.BASE_PATH",
                            "tagName": {
                                "pos": 785,
                                "end": 790,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Absolute path of the directory to open.</p>\n"
                        }
                    ]
                },
                {
                    "name": "openDirectory",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBasic checks before expanding the directory\n",
                    "description": "<p>Basic checks before expanding the directory</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1441,
                                "end": 1450,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "workspace"
                            },
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1435,
                                "end": 1440,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { invoke } from '@tauri-apps/api';\r\nimport { DEFAULT_NODE, FileSystemItem, mapFileSystemItem2Node, mapFileSystemItem2NodeList, Node } from '../../utilities/interfaces/Node';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FolderTreeService {\r\n\r\n  fileDirectoryStructure = new BehaviorSubject<Node[]>([]);\r\n  rootNode = new BehaviorSubject<Node>(DEFAULT_NODE);\r\n  ROOT_NAME: string = '';\r\n  private BASE_PATH: string = environment.current_directory\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * The path to load on the file-explorer .TODO: Ideally this should come from the Input variable but as for now this works :p\r\n   * @param path Absolute path of the directory to open.\r\n   */\r\n  initialize_Explorer(path: string = this.BASE_PATH) {\r\n    invoke<FileSystemItem[]>(\"read_directory\", { path }).then((directory_items: FileSystemItem[]) => {\r\n      let last_node = directory_items.pop()\r\n      if (last_node) {\r\n        let nodes_list = mapFileSystemItem2NodeList(directory_items, this.BASE_PATH);\r\n        this.rootNode.next({ ...mapFileSystemItem2Node(last_node), expanded: true })\r\n        this.fileDirectoryStructure.next(nodes_list)\r\n        this.ROOT_NAME = last_node.file_name;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Basic checks before expanding the directory\r\n   * @param workspace\r\n   */\r\n  openDirectory(workspace: Node) {\r\n    if (!workspace.expanded && !workspace.nodes?.length)\r\n      this.expandDirectory(workspace);\r\n    workspace.expanded = !workspace.expanded\r\n\r\n  }\r\n\r\n  /**\r\n   * Reads the contents of the directory and append to the exsisting structure\r\n   * @param folder Node for which the subfolders and files needs to be read\r\n   */\r\n  expandDirectory(folder: Node) {\r\n    invoke<FileSystemItem[]>(\"read_directory\", { path: folder.path }).then((items: FileSystemItem[]) => {\r\n      items.pop();\r\n      folder.expanded = true;\r\n      folder.nodes = mapFileSystemItem2NodeList(items, folder.path)\r\n    })\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ViewService",
            "id": "injectable-ViewService-f28341eaac304e915ea62dc53950d416226b6194aec4a8bef08133a96fd8f7a619c895d03b7960a8c117f3c3f11fccdc1b275f610eb100bb069447fd6e058412",
            "file": "src/app/modules/ui-elements/rusty-view/rusty-vew.service.ts",
            "properties": [
                {
                    "name": "currentWorkbookContent$",
                    "defaultValue": "new BehaviorSubject<string>(\r\n    'This is some default \\n work from an file',\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "currentWorkingDirectory",
                    "defaultValue": "signal<string | undefined>(environment.current_directory)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currentWorkingFileName",
                    "defaultValue": "signal<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentWorkpadFilePath",
                    "defaultValue": "signal<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "notepadEvents$",
                    "defaultValue": "new Subject<NotepadEvents>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Give the default path of the text file to be used when nothing is given</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nGive the default path of the text file to be used when nothing is given\n"
                }
            ],
            "methods": [
                {
                    "name": "handleFileSystemtEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nController to handle and control File Explorer related Events\n",
                    "description": "<p>Controller to handle and control File Explorer related Events</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2152,
                                "end": 2157,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2146,
                                "end": 2151,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>NotepadEvents</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleReadingFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSaveFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTabsEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nController to handle and control tabs related functionalities\n",
                    "description": "<p>Controller to handle and control tabs related functionalities</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1716,
                                "end": 1721,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1710,
                                "end": 1715,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>NotepadEvents</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleWorkpadEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nController to handle and control Workpad related Events\n",
                    "description": "<p>Controller to handle and control Workpad related Events</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2655,
                                "end": 2660,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2649,
                                "end": 2654,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>NotepadEvents</p>\n"
                        }
                    ]
                },
                {
                    "name": "readFile",
                    "args": [
                        {
                            "name": "path",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetWorkpadConfig",
                    "args": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves the file contents on the choosen directory.\nIf the file is not present then creates the file with the specified name and then stores the content .\nIf the file is present it stores the content in the exsisting file\n",
                    "description": "<p>Saves the file contents on the choosen directory.\nIf the file is not present then creates the file with the specified name and then stores the content .\nIf the file is present it stores the content in the exsisting file</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5085,
                                "end": 5089,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "file"
                            },
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5079,
                                "end": 5084,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setWorkpadConfigs",
                    "args": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "AppEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\r\nimport { invoke } from '@tauri-apps/api';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { AppEvents, NotepadEvents } from '../../utilities/interfaces/Events';\r\nimport { environment } from '../../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ViewService {\r\n  currentWorkbookContent$ = new BehaviorSubject<string>(\r\n    'This is some default \\n work from an file',\r\n  );\r\n  currentWorkpadFilePath = signal<string | undefined>(undefined);\r\n  currentWorkingDirectory = signal<string | undefined>(environment.current_directory);\r\n  currentWorkingFileName = signal<string | undefined>(undefined);\r\n  /**\r\n   * Give the default path of the text file to be used when nothing is given\r\n   */\r\n  notepadEvents$ = new Subject<NotepadEvents>();\r\n\r\n  constructor() {\r\n    this.notepadEvents$.subscribe((event: NotepadEvents) => {\r\n      switch (event.type) {\r\n        case AppEvents.FILE_SYSTEM_OPEN:\r\n        case AppEvents.FILE_SYSTEM_READ:\r\n          this.handleFileSystemtEvents(event);\r\n          break;\r\n\r\n        case AppEvents.TAB_CHANGE:\r\n        case AppEvents.TAB_CREATE:\r\n        case AppEvents.TAB_DELETE:\r\n        case AppEvents.TABS_EMPTY:\r\n          this.handleTabsEvent(event);\r\n          break;\r\n\r\n        case AppEvents.WORKPAD_SAVE_REQUEST:\r\n        case AppEvents.WORKPAD_SAVE_RESPONSE:\r\n        case AppEvents.WORKPAD_UPDATE:\r\n          this.handleWorkpadEvents(event);\r\n          break;\r\n\r\n        default:\r\n          console.debug(\"Unknow Type of event \", event);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Controller to handle and control tabs related functionalities\r\n   * @param event NotepadEvents\r\n   */\r\n  handleTabsEvent(event: NotepadEvents) {\r\n    switch (event.type) {\r\n      // On Tab change we want to trigger Workpad Event\r\n      case AppEvents.TAB_CHANGE:\r\n      case AppEvents.TABS_EMPTY:\r\n        this.handleReadingFile(event, AppEvents.WORKPAD_UPDATE);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  /**\r\n   * Controller to handle and control File Explorer related Events\r\n   * @param event NotepadEvents\r\n   */\r\n  handleFileSystemtEvents(event: NotepadEvents) {\r\n    switch (event.type) {\r\n      case AppEvents.FILE_SYSTEM_READ:\r\n        // Triggering a new Tab event to create a new tab when we receive a open File event\r\n        this.handleReadingFile(event, AppEvents.TAB_CREATE)\r\n        break;\r\n      default:\r\n        console.debug(\"Received Open File event \", event);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Controller to handle and control Workpad related Events\r\n   * @param event NotepadEvents\r\n   */\r\n  handleWorkpadEvents(event: NotepadEvents) {\r\n    switch (event.type) {\r\n      case AppEvents.WORKPAD_SAVE_REQUEST:\r\n        this.handleSaveFile(event, AppEvents.WORKPAD_SAVE_RESPONSE)\r\n        break\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  handleReadingFile(event: NotepadEvents, eventType: AppEvents) {\r\n    this.readFile(event.path).\r\n      then(\r\n        (fullfilledData) => {\r\n          this.setWorkpadConfigs(event, eventType, fullfilledData);\r\n        },\r\n        (rejectResponse) => {\r\n          this.resetWorkpadConfig(event, eventType, rejectResponse);\r\n        });\r\n  }\r\n\r\n  setWorkpadConfigs(event: NotepadEvents, eventType: AppEvents, data: string) {\r\n    this.currentWorkbookContent$.next(data)\r\n    this.currentWorkingFileName.set(event.file_name)\r\n    this.currentWorkpadFilePath.set(event.path)\r\n    this.notepadEvents$.next({\r\n      ...event,\r\n      type: eventType,\r\n    })\r\n  }\r\n  resetWorkpadConfig(event: NotepadEvents, eventType: AppEvents, data: string) {\r\n    this.currentWorkbookContent$.next(data)\r\n    this.currentWorkingFileName.set(undefined);\r\n    this.currentWorkpadFilePath.set(undefined);\r\n    this.notepadEvents$.next({\r\n      ...event,\r\n      type: eventType,\r\n    })\r\n  }\r\n\r\n  readFile(path: string | undefined): Promise<string> {\r\n    // If path is undefined the log a debug message and return the default values\r\n    if (!path) {\r\n      console.debug('Error while opening the file. Path undefined', path);\r\n      return new Promise((_, reject) => reject(\"Lets write an epic :(\"))\r\n    }\r\n\r\n    console.debug('Reading file with path ', path);\r\n    /**\r\n     * Reads the content of the file from the given path\r\n     */\r\n    return invoke<string>('read_file', { path })\r\n  }\r\n\r\n\r\n  handleSaveFile(event: NotepadEvents, eventType: AppEvents) {\r\n    this.saveFile(event).then(\r\n      (resolved) => {\r\n        this.notepadEvents$.next({\r\n          ...event,\r\n          type: eventType,\r\n          data: resolved\r\n        })\r\n      },\r\n      (reject) => {\r\n        this.notepadEvents$.next({\r\n          ...event,\r\n          type: eventType,\r\n          data: reject\r\n        })\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  /**\r\n   * Saves the file contents on the choosen directory.\r\n   * If the file is not present then creates the file with the specified name and then stores the content .\r\n   * If the file is present it stores the content in the exsisting file\r\n   * @param file\r\n   */\r\n  saveFile(file: NotepadEvents): Promise<string> {\r\n    if (!file.data && !file.path) {\r\n      return new Promise<string>((res, rej) => rej(\"Data or path not defined\"));\r\n    }\r\n    return invoke<string>('save_file', { path: file.path, data: file.data })\r\n  }\r\n\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "AutofocusDirective",
            "id": "directive-AutofocusDirective-91c33ec0a93f41a88fe1ac3e953b558462a71c24e0d1c7adffdc8b408b853a9cc2323236ece4c93d0290523e653b14e7c4b4fe3eef93c3e16a2cea45f129c963",
            "file": "src/app/modules/directives/autofocus/autofocus.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[rustyAutofocus]',\r\n  standalone: true,\r\n})\r\nexport class AutofocusDirective implements AfterViewInit {\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  ngAfterViewInit() {    \r\n    this.elementRef.nativeElement.focus();\r\n  }\r\n}\r\n",
            "selector": "[rustyAutofocus]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ResizerDirective",
            "id": "directive-ResizerDirective-b877ff0d06c950f50e033ed334c499ae8f181705cb585691cefff27e9291e85011bdcd47038349412717f9535b355e4d9d3c99ff957d0eb1bd18766d63272b09",
            "file": "src/app/modules/directives/resizer/resizer.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[workpadResizer]',\r\n  standalone: true\r\n})\r\nexport class ResizerDirective {\r\n\r\n  @HostListener(\"input\") onTextChange(){\r\n    this.resize(this.el.nativeElement);\r\n  }\r\n\r\n  constructor(private el: ElementRef) { }\r\n\r\n  resize(textArea: HTMLTextAreaElement) {\r\n    textArea.style.height = 'auto'\r\n    textArea.style.height = (textArea.scrollHeight) + 'px';\r\n}\r\n\r\n}\r\n",
            "selector": "[workpadResizer]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onTextChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "resize",
                    "args": [
                        {
                            "name": "textArea",
                            "type": "HTMLTextAreaElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "textArea",
                            "type": "HTMLTextAreaElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-ebbb0f557e91379bc0f0ce55f911748c37f885259979ad9e0ee1aab5a0f71b1219624f012bca74e426388579d452b3f06072ee06179843c1d35e84184a549735",
            "file": "src/app/modules/directives/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, EmbeddedViewRef, HostListener, Injector, Input } from '@angular/core';\r\nimport { TooltipComponent } from '../../ui-elements/tooltip/tooltip.component';\r\n\r\n@Directive({\r\n  selector: '[tooltip]',\r\n  standalone: true\r\n})\r\nexport class TooltipDirective {\r\n\r\n  @Input() tooltip:string = '';\r\n\r\n  private componentRef: ComponentRef<any> | null = null;\r\n\r\n  constructor(\r\n\tprivate elementRef: ElementRef,\r\n\tprivate appRef: ApplicationRef,\r\n\tprivate componentFactoryResolver: ComponentFactoryResolver,\r\n\tprivate injector: Injector) {\r\n  }\r\n//  TODO -> good idea -> making the tooltip open on mousehover on text when we have some selected items \r\n  @HostListener('contextmenu')\r\n  onMouseEnter(): void {\r\n    if (this.componentRef === null) {\r\n        const componentFactory =\r\n              this.componentFactoryResolver.resolveComponentFactory(\r\n              TooltipComponent);\r\n        this.componentRef = componentFactory.create(this.injector);\r\n        this.appRef.attachView(this.componentRef.hostView);\r\n        const domElem =\r\n              (this.componentRef.hostView as EmbeddedViewRef<any>)\r\n              .rootNodes[0] as HTMLElement;\r\n        document.body.appendChild(domElem);\r\n        this.setTooltipComponentProperties();\r\n    }\r\n  }\r\n\r\n  private setTooltipComponentProperties() {\r\n    if (this.componentRef !== null) {\r\n      this.componentRef.instance.tooltip = this.tooltip;\r\n      const {left, right, bottom} =\r\n            this.elementRef.nativeElement.getBoundingClientRect();\r\n      this.componentRef.instance.left = (right - left) / 2 + left;\r\n      this.componentRef.instance.top = bottom;\r\n    }\r\n  }\r\n\r\n  @HostListener('click')\r\n  onMouseLeave(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.componentRef !== null) {\r\n      this.appRef.detachView(this.componentRef.hostView);\r\n      this.componentRef.destroy();\r\n      this.componentRef = null;\r\n    }\r\n  }\r\n\r\n}\r\n",
            "selector": "[tooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48
                },
                {
                    "name": "contextmenu",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'contextmenu'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setTooltipComponentProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d430f7ce62ca38880296ed26de1236fc07dcfa8c050536b47440e431616e2111a8d7ccd2ac15afccec191d4e685f3e9ce062e3f9ba8faf347ddc329e3916aa41",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { invoke } from '@tauri-apps/api';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n\r\n  \r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-rusty-view ></app-rusty-view>\r\n"
        },
        {
            "name": "FolderComponent",
            "id": "component-FolderComponent-16f8ead55db02cb895941ff60fd29b2d7ca5466800ea7650380455f2a7d1d8249f9f308dadc99b379fb3e2068533798966279eefa6828568455f06bb20090255",
            "file": "src/app/modules/ui-elements/folder-tree/folder/folder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rusty-folder",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./folder.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "folders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Node[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FolderTreeService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openDirectory",
                    "args": [
                        {
                            "name": "folders",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "folders",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "Node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, NgFor, NgIf } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { Node } from '../../../utilities/interfaces/Node';\r\nimport { FolderTreeService } from '../folder-tree.service';\r\nimport { ViewService } from '../../rusty-view/rusty-vew.service';\r\nimport { AppEvents } from '../../../utilities/interfaces/Events';\r\n\r\n@Component({\r\n  selector: 'rusty-folder',\r\n  standalone: true,\r\n  imports: [NgFor, NgIf, NgClass],\r\n  host: {\r\n    '[style.list-style-type]': \"none\"\r\n  },\r\n  templateUrl: './folder.component.html',\r\n  styleUrl: './folder.component.scss'\r\n})\r\nexport class FolderComponent {\r\n\r\n  @Input() folders!: Node[];\r\n\r\n  constructor(public fs: FolderTreeService, private viewService:ViewService) {\r\n  }\r\n\r\n  readFile(file: Node) {\r\n    console.log(\"Sending a read file event \", file.name);\r\n\r\n    this.viewService.notepadEvents$.next({\r\n      file_name: file.name,\r\n      path: file.path,\r\n      type: AppEvents.FILE_SYSTEM_READ\r\n    })\r\n  }\r\n\r\n  openDirectory(folders: Node) {\r\n    this.fs.openDirectory(folders);\r\n  }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./folder.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fs",
                        "type": "FolderTreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewService",
                        "type": "ViewService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fs",
                        "type": "FolderTreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewService",
                        "type": "ViewService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- Contents of the Opened Directory -->\r\n<li class=\"py-1 item\" *ngFor=\"let folder of folders;index as i\">\r\n  <span (click)=\"folder.isDirectory? this.openDirectory(folder): this.readFile(folder)\" class=\"flex items-center\"\r\n    [ngClass]=\"folder.isDirectory ? '' : 'ml-1 mt-1'\">\r\n    <i style=\"font-size: 12px; align-content: end; margin-right: 3px;\" *ngIf=\"folder.isDirectory\" class=\"pi\" [ngClass]=\"\r\n    folder.expanded ? 'pi-angle-down' : 'pi-angle-right'\r\n  \"></i> {{folder.name}}\r\n  </span>\r\n\r\n  <!-- Sub Folders - if any  -->\r\n  <ul style=\"padding-left: .7rem;\">\r\n    <rusty-folder *ngIf=\"folder.nodes && folder.expanded\" [folders]=\"folder.nodes\" />\r\n  </ul>\r\n</li>\r\n"
        },
        {
            "name": "FolderTreeComponent",
            "id": "component-FolderTreeComponent-1112fc96c260dbcced383b101705498de22ca037bdca7557d106fe55d0a3ac9200f3c033f6bcdeaec5e639a99c7083d94ab31af6bca36459982314ff0684e92f",
            "file": "src/app/modules/ui-elements/folder-tree/folder-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rusty-folder-tree",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./folder-tree.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fileDirectories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fileDirectories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "root$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "FolderComponent",
                    "type": "component"
                },
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, NgFor, NgIf, UpperCasePipe } from '@angular/common';\r\nimport { Component, OnDestroy } from '@angular/core';\r\nimport { FolderComponent } from './folder/folder.component';\r\nimport { FolderTreeService } from './folder-tree.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Node } from '../../utilities/interfaces/Node';\r\n\r\n@Component({\r\n  selector: 'rusty-folder-tree',\r\n  standalone: true,\r\n  imports: [NgIf, NgFor, NgClass, FolderComponent, UpperCasePipe],\r\n  templateUrl: './folder-tree.component.html',\r\n  styleUrl: './folder-tree.component.scss',\r\n})\r\nexport class FolderTreeComponent implements OnDestroy {\r\n\r\n  fileDirectories!: Node[];\r\n  fileDirectories$!: Subscription;\r\n\r\n  root!: Node;\r\n  root$!: Subscription;\r\n\r\n  constructor(private fsService: FolderTreeService) {\r\n    this.fileDirectories$ = this.fsService.fileDirectoryStructure.subscribe((ele: Node[]) => {\r\n      this.fileDirectories = ele;\r\n    });\r\n    this.root$ = this.fsService.rootNode.subscribe((ele: Node) => {\r\n      this.root = ele;\r\n    });\r\n    this.fsService.initialize_Explorer();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.fileDirectories$.unsubscribe();\r\n    this.root$.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./folder-tree.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fsService",
                        "type": "FolderTreeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fsService",
                        "type": "FolderTreeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ul class=\"my-0\" style=\"padding: 2px 0px 0px 3px\">\r\n  <li class=\"py-1\">\r\n    <!-- Root Folder  -->\r\n    <span (click)=\"root.expanded = !root.expanded\" class=\"flex items-center item\" style=\"font-weight: 500\">\r\n      <i style=\"font-size: 12px; align-content: end; margin-right: 3px\" class=\"pi\"\r\n        [ngClass]=\"root.expanded ? 'pi-angle-down' : 'pi-angle-right'\"></i>\r\n      {{ root.name | uppercase }}\r\n    </span>\r\n\r\n    <!-- Contents of the Opened Directory -->\r\n    <ul *ngIf=\"root.expanded\" style=\"padding-left: 0.7rem\">\r\n      <rusty-folder *ngIf=\"fileDirectories.length\" [folders]=\"fileDirectories\" />\r\n    </ul>\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "HorizontalBarComponent",
            "id": "component-HorizontalBarComponent-275481caf51eda8750c4c686c6a57df06c1684422cba1a7fe64d29beb4c0b1172a7b23c4290b2d7893e8451719351062b9170a76faf8a463f71f5d0b84c6b588",
            "file": "src/app/modules/ui-elements/horizontal-bar/horizontal-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horizontal-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./horizontal-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-horizontal-bar',\r\n  templateUrl: './horizontal-bar.component.html',\r\n  styleUrl: './horizontal-bar.component.scss',\r\n  standalone: true,\r\n  imports: []\r\n})\r\nexport class HorizontalBarComponent {\r\n\r\n}\r\n",
            "styleUrl": "./horizontal-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"h-2rem w-full px-2\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n  <div class=\"inline-flex\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n  <p class=\"break-line\"></p>\r\n</div>\r\n"
        },
        {
            "name": "LandingPageComponent",
            "id": "component-LandingPageComponent-d42f45a45bf2f1e6b4d80a6b1fabca2bfc1caa8ada9df889052de4b3bb8e0061865660c475bb6d85887cf02ef8bfec9c73eba3f3ce95a5a012b0bab3b60fef07",
            "file": "src/app/modules/ui-elements/landing-page/landing-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rusty-landing-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./landing-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'rusty-landing-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './landing-page.component.html',\r\n  styleUrl: './landing-page.component.scss'\r\n})\r\nexport class LandingPageComponent {\r\n\r\n}\r\n",
            "styleUrl": "./landing-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container flex flex-column justify-content-center h-full align-items-center \">\r\n  <div class=\"m-2 p-1\">\r\n    New Tab <span class=\"ml-2 mr-1 command\">Ctrl</span> + <span class=\"ml-1 command\">N</span>\r\n  </div>\r\n  <div class=\"m-2 p-1\">\r\n    Switch Tab <span class=\"ml-2 mr-1 command\">Ctrl</span> + <span class=\"ml-1 command\">T</span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RustyViewComponent",
            "id": "component-RustyViewComponent-9f15f1c0a48f56c0596a00c7834e4497c751712ed6905db0252d1bfbe70fecdacf02e3db6e34af0c4e3752d4a3b086dea48eb3aab82acf807c829cef8cd9dd6f",
            "file": "src/app/modules/ui-elements/rusty-view/rusty-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rusty-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rusty-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TabsComponent",
                    "type": "component"
                },
                {
                    "name": "WorkpadComponent",
                    "type": "component"
                },
                {
                    "name": "SplitterComponent",
                    "type": "component"
                },
                {
                    "name": "FolderTreeComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "LandingPageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { TabsComponent } from '../tabs/tabs.component';\r\nimport { WorkpadComponent } from '../workpad/workpad.component';\r\nimport { SplitterComponent } from '../splitter/splitter.component';\r\nimport { FolderTreeComponent } from '../folder-tree/folder-tree.component';\r\nimport { NgIf } from '@angular/common';\r\nimport { LandingPageComponent } from \"../landing-page/landing-page.component\";\r\n\r\n@Component({\r\n  selector: 'app-rusty-view',\r\n  templateUrl: './rusty-view.component.html',\r\n  styleUrl: './rusty-view.component.scss',\r\n  standalone: true,\r\n  imports: [\r\n    TabsComponent,\r\n    WorkpadComponent,\r\n    SplitterComponent,\r\n    FolderTreeComponent,\r\n    NgIf,\r\n    LandingPageComponent\r\n],\r\n})\r\nexport class RustyViewComponent {\r\n\r\n  constructor() {\r\n  }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./rusty-view.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "extends": [],
            "templateData": "<div class=\"layout h-full\">\r\n  <!--  Add a Folders option on left side  -->\r\n  <app-splitter class=\"h-full\">\r\n    <div >\r\n      <rusty-folder-tree></rusty-folder-tree>\r\n    </div>\r\n      <app-tabs #rustyTabs panel2></app-tabs>\r\n      <app-workpad *ngIf=\"rustyTabs.tabsMap.size\" panel2 ></app-workpad>\r\n      <rusty-landing-page *ngIf=\"!rustyTabs.tabsMap.size\" panel2>Some text</rusty-landing-page>\r\n  </app-splitter>\r\n</div>\r\n"
        },
        {
            "name": "SplitterComponent",
            "id": "component-SplitterComponent-dc07d1d75893a3e814011a0bc891a1079bc4d76c9ac9ffac58d33d143098bad9d808bed00968a8824ba7fcfe33f7b11aa162579afa31d77bc859c34f25536afb",
            "file": "src/app/modules/ui-elements/splitter/splitter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-splitter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./splitter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SplitterModule",
                    "type": "module"
                },
                {
                    "name": "ScrollPanelModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { SplitterModule } from 'primeng/splitter';\r\nimport { ScrollPanelModule } from 'primeng/scrollpanel';\r\n\r\n@Component({\r\n  selector: 'app-splitter',\r\n  templateUrl: './splitter.component.html',\r\n  styleUrl: './splitter.component.scss',\r\n  standalone: true,\r\n  imports: [SplitterModule, ScrollPanelModule]\r\n})\r\nexport class SplitterComponent {\r\n}\r\n",
            "styleUrl": "./splitter.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p-splitter\r\n    [panelSizes]=\"[25, 75]\"\r\n    [minSizes]=\"[1, 20]\"\r\n    [style]=\"{ border: 'none', height: '100%' }\"\r\n    styleClass=\"mb-5\">\r\n    <ng-template pTemplate>\r\n      <p-scrollPanel class=\"w-full\" [style]=\"{ height: '100%', backgroundColor:'var(--surface-dark-secondary)' }\" styleClass=\"custombar1\">\r\n        <ng-content ></ng-content>\r\n      </p-scrollPanel>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate>\r\n        <div [style]=\"{margin:'0px', padding: '0px'}\" class=\"col \">\r\n           <ng-content select=\"[panel2]\"></ng-content>\r\n        </div>\r\n    </ng-template>\r\n</p-splitter>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-84608eb8c7ef0328f54a078317f9f2005c03b62173d70f63cfde79574d9232c40224535b0f63f8cf403eb73e2b4df744e82a6a67c9024d1e79aa069ac543146a",
            "file": "src/app/modules/ui-elements/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>This is use to toggle active tab on Ctrl + Tab event</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nThis is use to toggle active tab on Ctrl + Tab event\n"
                },
                {
                    "name": "activeTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tab | undefined",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "tabsMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | Tab>",
                    "optional": false,
                    "description": "<p>This takes a list of tabs from the service which reads all the files</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nThis takes a list of tabs from the service which reads all the files\n"
                },
                {
                    "name": "wasTabClosed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSwitch to next Tab on control + tab event\n",
                    "description": "<p>Switch to next Tab on control + tab event</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.control.tab'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "createBlankTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNew Tab on Ctrl + N\n",
                    "description": "<p>New Tab on Ctrl + N</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.control.N'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "getPathWithIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleTabIndexChange",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles tabs change Event\n",
                    "description": "<p>Handles tabs change Event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4481,
                                "end": 4486,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4475,
                                "end": 4480,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "newTab",
                    "args": [
                        {
                            "name": "tabEvent",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tabEvent",
                            "type": "NotepadEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newTabActions",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "new_path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAll things needs to be done to create a new tab\n",
                    "description": "<p>All things needs to be done to create a new tab</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "new_path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tabClose",
                    "args": [
                        {
                            "name": "event",
                            "type": "TabViewCloseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis handles the tabs close event.\nScenarios -> Current Active tabs is closed , non-active tab is closed , last tab is closed\n",
                    "description": "<p>This handles the tabs close event.\nScenarios -&gt; Current Active tabs is closed , non-active tab is closed , last tab is closed</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3029,
                                "end": 3034,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "TabViewCloseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3023,
                                "end": 3028,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>TabViewCloseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "triggerTabChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis triggers an Tab Change Event to inform other components to take respective actions\n",
                    "description": "<p>This triggers an Tab Change Event to inform other components to take respective actions</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.control.N",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNew Tab on Ctrl + N\n",
                    "description": "<p>New Tab on Ctrl + N</p>\n",
                    "line": 90
                },
                {
                    "name": "document:keydown.control.tab",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSwitch to next Tab on control + tab event\n",
                    "description": "<p>Switch to next Tab on control + tab event</p>\n",
                    "line": 63
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TabViewModule",
                    "type": "module"
                },
                {
                    "name": "WorkpadComponent",
                    "type": "component"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostListener,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TabViewCloseEvent, TabViewModule } from 'primeng/tabview';\r\nimport { CommonModule, NgFor, NgIf } from '@angular/common';\r\nimport { WorkpadComponent } from '../workpad/workpad.component';\r\nimport { Tab } from '../../utilities/interfaces/Tab';\r\nimport { NEW_TAB_DEFAULT } from '../../utilities/Constants';\r\nimport { AppEvents, NotepadEvents } from '../../utilities/interfaces/Events';\r\nimport { ViewService } from '../rusty-view/rusty-vew.service';\r\nimport { filter } from 'rxjs';\r\n@Component({\r\n  selector: 'app-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrl: './tabs.component.scss',\r\n  standalone: true,\r\n  imports: [CommonModule, TabViewModule, WorkpadComponent, NgFor, NgIf],\r\n})\r\nexport class TabsComponent {\r\n\r\n\r\n  /**\r\n   * This is use to toggle active tab on Ctrl + Tab event\r\n   */\r\n  activeIndex: number = 0;\r\n  wasTabClosed: boolean = false;\r\n  activeTab: Tab | undefined;\r\n\r\n\r\n  /**\r\n   * This takes a list of tabs from the service which reads all the files\r\n   */\r\n  tabsMap: Map<string, Tab> = new Map();\r\n\r\n  constructor(private viewService: ViewService, private cd: ChangeDetectorRef) {\r\n    this.viewService.notepadEvents$.pipe(\r\n      filter(event =>\r\n        event.type === AppEvents.TAB_CREATE ||\r\n        event.type === AppEvents.TAB_DELETE\r\n      ))\r\n      .subscribe((event) => {\r\n        switch (event.type) {\r\n          case AppEvents.TAB_CREATE:\r\n            this.newTab(event);\r\n            break;\r\n          default:\r\n            console.debug(\"Some Unhandled Event recevied \", event, AppEvents[event.type]);\r\n            break;\r\n        }\r\n      })\r\n  }\r\n\r\n  getTabsArray() {\r\n    return this.tabsMap.values();\r\n  }\r\n  /**\r\n   * Switch to next Tab on control + tab event\r\n   */\r\n  @HostListener('document:keydown.control.tab')\r\n  changeTab() {\r\n    this.tabsMap.set(this.activeTab!.path, { ...this.activeTab!, selected: false })\r\n    this.activeIndex = (this.activeIndex + 1) % this.tabsMap.size;\r\n    this.activeTab = { ...this.tabsMap.get(this.getPathWithIndex(this.activeIndex))!, selected: true };\r\n    this.tabsMap.set(this.activeTab.path, { ...this.activeTab! })\r\n    this.triggerTabChangeEvent();\r\n  }\r\n\r\n\r\n  newTab(tabEvent: NotepadEvents) {\r\n    if (!tabEvent.file_name || !tabEvent.path) {\r\n      this.createBlankTab();\r\n      return;\r\n    }\r\n    if (!this.tabsMap.has(tabEvent.path))\r\n      this.newTabActions(this.tabsMap.size, tabEvent.path, tabEvent.file_name)\r\n    else {\r\n      this.activeTab = { ...this.tabsMap.get(tabEvent.path)! }\r\n      this.activeIndex = this.activeTab.id;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * New Tab on Ctrl + N\r\n   */\r\n  @HostListener('document:keydown.control.N')\r\n  createBlankTab() {\r\n    this.newTabActions(this.tabsMap.size, NEW_TAB_DEFAULT.path, NEW_TAB_DEFAULT.title)\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * This handles the tabs close event.\r\n   * Scenarios -> Current Active tabs is closed , non-active tab is closed , last tab is closed\r\n   * @param event TabViewCloseEvent\r\n   */\r\n  tabClose(event: TabViewCloseEvent) {\r\n    this.wasTabClosed = true;\r\n    let close_tab_path = this.getPathWithIndex(event.index);\r\n\r\n    /** This handles non-active tab close and last tab close ,\r\n     * we do not need to trigger Tab change event since we dont wont to\r\n     * re-dender the workpad\r\n     */\r\n    this.tabsMap.delete(close_tab_path);\r\n    if (event.index != this.tabsMap.size)\r\n      this.syncTabs();\r\n    // Handle Current Active tab closed\r\n    if (event.index == this.activeIndex) {\r\n      // If there are no tabsMap is empty\r\n      if (!this.tabsMap.size) {\r\n        this.activeTab = undefined;\r\n        this.activeIndex = -1;\r\n        this.wasTabClosed = false;\r\n      }\r\n      // Since the active tab is close we need to set a new active tab and trigger a Tab Change Event\r\n      if (this.tabsMap.size) {\r\n        // Need to handle the case where syncing the tabsMap changed the indexing\r\n        this.activeIndex = (event.index) % this.tabsMap.size;\r\n        let path = this.getPathWithIndex(this.activeIndex);\r\n        this.tabsMap.set(path, { ...this.tabsMap.get(path)!, selected: true })\r\n        this.activeTab = { ...this.tabsMap.get(path)! };\r\n      }\r\n    }\r\n    this.triggerTabChangeEvent()\r\n  }\r\n\r\n  syncTabs() {\r\n    let n = 0;\r\n    this.tabsMap.forEach(tab => {\r\n      this.tabsMap.set(tab.path, { ...tab, id: n++ })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles tabs change Event\r\n   * @param index\r\n   */\r\n  handleTabIndexChange(index: number) {\r\n\r\n    if (!this.wasTabClosed) {\r\n      let path = this.getPathWithIndex(index);\r\n      this.tabsMap.set(this.activeTab!.path, { ...this.activeTab!, selected: false })\r\n      this.activeTab = { ...this.tabsMap.get(path)!, selected: true };\r\n      this.activeIndex = index;\r\n      this.tabsMap.set(path, { ...this.activeTab, selected: true })\r\n      this.triggerTabChangeEvent();\r\n    }\r\n    this.wasTabClosed = false;\r\n\r\n\r\n  }\r\n\r\n  /**\r\n * All things needs to be done to create a new tab\r\n */\r\n  newTabActions(id: number, new_path: string, file_name: string,) {\r\n    let tab: Tab = { ...NEW_TAB_DEFAULT, id: id, title: file_name, path: new_path, };\r\n    this.tabsMap.set(tab.path, tab);\r\n    // This handles the scenario where we want to un-select the older tabs as well.\r\n    if (this.activeTab) {\r\n      this.tabsMap.set(this.activeTab.path, { ...this.activeTab, selected: false })\r\n    }\r\n    this.activeTab = { ...tab };\r\n    this.activeIndex = id;\r\n    this.triggerTabChangeEvent();\r\n  }\r\n\r\n  getPathWithIndex(index: number): string {\r\n    let path = \"\";\r\n    this.tabsMap.forEach((tab) => {\r\n      if (tab.id == index) {\r\n        path = tab.path;\r\n      }\r\n    })\r\n    return path;\r\n  }\r\n  /**\r\n   * This triggers an Tab Change Event to inform other components to take respective actions\r\n   */\r\n\r\n  triggerTabChangeEvent() {\r\n    if (this.tabsMap.size) {\r\n      this.viewService.notepadEvents$.next({\r\n        path: this.activeTab!.path,\r\n        file_name: this.activeTab!.title,\r\n        type: AppEvents.TAB_CHANGE\r\n      });\r\n    } else {\r\n      this.viewService.notepadEvents$.next({\r\n        path: undefined,\r\n        file_name: undefined,\r\n        type: AppEvents.TABS_EMPTY\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./tabs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewService",
                        "type": "ViewService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "viewService",
                        "type": "ViewService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div *ngIf=\"tabsMap.size\" >\r\n  <p-tabView (onClose)=\"tabClose($event)\" (activeIndexChange)=\"handleTabIndexChange($event)\" [activeIndex]=\"activeIndex\" id=\"closableTabView\" [scrollable]=\"true\">\r\n    <p-tabPanel *ngFor=\"let tab of tabsMap.entries()\" [selected]=\"tab[1].selected\" [closable]=\"tab[1].isClosable\">\r\n        <!-- HEADER -->\r\n        <ng-template   pTemplate=\"header\">\r\n            <div  class=\"flex align-items-center gap-2\">\r\n                    {{tab[1].title}}\r\n            </div>\r\n        </ng-template>\r\n        <!-- Content  -->\r\n    </p-tabPanel>\r\n  </p-tabView>\r\n</div>\r\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-bf44bf2042da76a5b3670946546c6c1a6ed35c28c096f6fcee3871beecd50843315f7c27415260b0a4ab3065d6ec93a7fcf49973a822f28b53ac40ec79118165",
            "file": "src/app/modules/ui-elements/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tooltip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "left",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "tooltip",
                    "defaultValue": "\"Tooltip is working!!\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "top",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tooltip',\r\n  templateUrl: './tooltip.component.html',\r\n  styleUrl: './tooltip.component.scss',\r\n  standalone: true,\r\n  imports: []\r\n})\r\nexport class TooltipComponent {\r\n  tooltip = \"Tooltip is working!!\";\r\n  left:number = 0;\r\n  top:number = 0;\r\n}\r\n",
            "styleUrl": "./tooltip.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"tooltip\"\r\n     [style.left]=\"left + 'px'\" [style.top]=\"top + 'px'\">\r\n  {{tooltip}}\r\n</div>\r\n"
        },
        {
            "name": "WorkpadComponent",
            "id": "component-WorkpadComponent-e5f1ac1fa17c6aefb1eeb85153f3c59acd837bfc1e7606e67fbf252620236215a15fae4b9ef2eb41cddbe2a8898e357a29d01eddfca6d202631940ddd13bf0b3",
            "file": "src/app/modules/ui-elements/workpad/workpad.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-workpad",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./workpad.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentChange$",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "contentChangeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "notepadSubs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "quill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Quill",
                    "optional": false,
                    "description": "<p>Quill Editor object to access the internal apis</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nQuill Editor object to access the internal apis\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showHeader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Toggle to enable/disable header toolbar</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nToggle to enable/disable header toolbar\n"
                },
                {
                    "name": "supportsQuill",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "workpadContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Takes input string from tabs . Which reads data from the file</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nTakes input string from tabs . Which reads data from the file\n"
                },
                {
                    "name": "workpadContent$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "getCurrentDraf",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo emit the current content to the rusty-view to save.\n",
                    "description": "<p>To emit the current content to the rusty-view to save.</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.control.S'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "handleContentChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "EditorTextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis is a listner to the workpad changes and debounces the changes before finally calling isQuillDocument\n",
                    "description": "<p>This is a listner to the workpad changes and debounces the changes before finally calling isQuillDocument</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4554,
                                "end": 4559,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "EditorTextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4548,
                                "end": 4553,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>takes in the Quill EditorTextChangeEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "initializeEditor",
                    "args": [
                        {
                            "name": "event",
                            "type": "EditorInitEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTriggered when the Quill Editor is initialiezed\n",
                    "description": "<p>Triggered when the Quill Editor is initialiezed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EditorInitEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isQuillDocument",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis checks if we have used the quill features as in bullets , numbering , text formatting and all to toggle between\na normal and a quill type file before saving.\n",
                    "description": "<p>This checks if we have used the quill features as in bullets , numbering , text formatting and all to toggle between\na normal and a quill type file before saving.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4156,
                                "end": 4161,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4150,
                                "end": 4155,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>HTML as string from the quill Docuemnt .</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadDataFromFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the data in the workpad form file\n",
                    "description": "<p>Loads the data in the workpad form file</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.control.S",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo emit the current content to the rusty-view to save.\n",
                    "description": "<p>To emit the current content to the rusty-view to save.</p>\n",
                    "line": 107
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "EditorModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  HostListener,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { CommonModule, NgStyle } from '@angular/common';\r\nimport { EditorInitEvent, EditorModule, EditorTextChangeEvent } from 'primeng/editor';\r\nimport { FormsModule } from '@angular/forms';\r\nimport Quill from 'quill';\r\nimport { Delta } from 'quill/core';\r\nimport { debounceTime, filter, Subject, Subscription } from 'rxjs';\r\nimport { ViewService } from '../rusty-view/rusty-vew.service';\r\nimport { AppEvents } from '../../utilities/interfaces/Events';\r\n@Component({\r\n  selector: 'app-workpad',\r\n  standalone: true,\r\n  imports: [CommonModule, EditorModule, FormsModule, NgStyle],\r\n  templateUrl: './workpad.component.html',\r\n  styleUrl: './workpad.component.scss',\r\n})\r\nexport class WorkpadComponent implements OnDestroy {\r\n\r\n  /**\r\n   * Takes input string from tabs . Which reads data from the file\r\n   */\r\n  workpadContent!: string;\r\n  workpadContent$: Subscription;\r\n\r\n  supportsQuill: boolean = false;\r\n\r\n  contentChange$ = new Subject<string>();\r\n  contentChangeSubscription!: Subscription;\r\n  notepadSubs: Subscription;\r\n  /**\r\n   * Quill Editor object to access the internal apis\r\n   */\r\n  private quill!: Quill;\r\n\r\n  constructor(private viewService: ViewService) {\r\n    this.workpadContent$ = this.viewService.currentWorkbookContent$.subscribe(value => this.workpadContent = value);\r\n    this.contentChangeSubscription = this.contentChange$.pipe(debounceTime(1000)).subscribe((event) => this.isQuillDocument(event))\r\n    this.notepadSubs = this.viewService.notepadEvents$.pipe(\r\n      filter(event =>\r\n        event.type == AppEvents.WORKPAD_SAVE_REQUEST ||\r\n        event.type == AppEvents.WORKPAD_SAVE_RESPONSE ||\r\n        event.type == AppEvents.WORKPAD_UPDATE\r\n      )).subscribe((event) => {\r\n\r\n        if (event.type == AppEvents.WORKPAD_UPDATE) {\r\n          this.loadDataFromFile();\r\n        }\r\n        else if (event.type == AppEvents.WORKPAD_SAVE_RESPONSE) {\r\n          // TODO: This needs to handle UI pop with save successfull or failed. The data contains the response from the backend or service\r\n          console.debug(\"Event data \", event.data);\r\n        }\r\n      })\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentChangeSubscription.unsubscribe();\r\n    this.notepadSubs.unsubscribe();\r\n    this.workpadContent$.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Toggle to enable/disable header toolbar\r\n   */\r\n  showHeader: boolean = false;\r\n\r\n\r\n  /**\r\n   * Triggered when the Quill Editor is initialiezed\r\n   */\r\n  initializeEditor(event: EditorInitEvent) {\r\n    this.quill = event.editor;\r\n    this.loadDataFromFile();\r\n  }\r\n\r\n  /**\r\n   * Loads the data in the workpad form file\r\n   */\r\n  loadDataFromFile() {\r\n    if (this.quill) {\r\n      let delta;\r\n      try {\r\n        delta = new Delta(JSON.parse(this.workpadContent));\r\n        if (!delta.ops.length) {\r\n          throw new Error(\"Not a Quill Object \");\r\n        }\r\n        console.debug(\"Loading Quill Object \");\r\n\r\n        this.supportsQuill = true;\r\n        this.quill.setContents(delta);\r\n      } catch (error) {\r\n        console.debug(\"Loading normal text Object\");\r\n\r\n        this.quill.setText(this.workpadContent);\r\n        this.supportsQuill = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * To emit the current content to the rusty-view to save.\r\n   */\r\n  @HostListener('document:keydown.control.S')\r\n  getCurrentDraf() {\r\n    if (this.quill) {\r\n      if (this.supportsQuill) {\r\n        console.debug(\"Saving quill Supported Content \");\r\n        return this.viewService.notepadEvents$.next({ data: JSON.stringify(this.quill.getContents()), type: AppEvents.WORKPAD_SAVE_REQUEST });\r\n      }\r\n      else {\r\n        console.debug(\"Saving Normal Text Content\");\r\n        return this.viewService.notepadEvents$.next({ data: this.quill.getText(), type: AppEvents.WORKPAD_SAVE_REQUEST });\r\n      }\r\n    }\r\n    return this.viewService.notepadEvents$.next({ data: undefined, type: AppEvents.WORKPAD_SAVE_REQUEST });\r\n  }\r\n\r\n  /**\r\n   * This checks if we have used the quill features as in bullets , numbering , text formatting and all to toggle between\r\n   * a normal and a quill type file before saving.\r\n   * @param event HTML as string from the quill Docuemnt .\r\n   */\r\n  isQuillDocument(event: string) {\r\n    if (event.match(new RegExp('<(ol|em|strong|li|u)\\\\b[^>]*>.*?</\\\\1>'))) {\r\n      this.supportsQuill = true\r\n    }\r\n    else {\r\n      this.supportsQuill = false\r\n    }\r\n  }\r\n  /**\r\n   * This is a listner to the workpad changes and debounces the changes before finally calling isQuillDocument\r\n   * @param event takes in the Quill EditorTextChangeEvent\r\n   */\r\n  handleContentChange(event: EditorTextChangeEvent) {\r\n    this.contentChange$.next(event.htmlValue);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./workpad.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewService",
                        "type": "ViewService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "viewService",
                        "type": "ViewService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<p-editor (onTextChange)=\"handleContentChange($event)\" (onInit)=\"initializeEditor($event)\" [spellcheck]=\"false\" class=\"workpad\">\r\n    <ng-template  pTemplate=\"header\">\r\n        <span *ngIf=\"showHeader\" class=\"ql-formats\">\r\n            <button type=\"button\" class=\"ql-bold\" aria-label=\"Bold\"></button>\r\n            <button type=\"button\" class=\"ql-italic\" aria-label=\"Italic\"></button>\r\n            <button type=\"button\" class=\"ql-underline\" aria-label=\"Underline\"></button>\r\n        </span>\r\n    </ng-template>\r\n</p-editor>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-587bb01bf19de91e969da2a313bd0b0390e1bc6c6f912a6a2bb1cea639a3189dd6fff6f1938cd2bf380e99a15557f1f2439f5a11a91008650f383db4e7690c82",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\nimport { RustyViewComponent } from './modules/ui-elements/rusty-view/rusty-view.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    RustyViewComponent,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RustyViewComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-d66c0e3073452a4e998b362c0524606d485dd600521cbaac9f4974777bc5819f86cc3e73e09542012cf90735ce422e91386643b9aa2a8d6aebe791616ab4597e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routes.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nexport const routes: Routes = [];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class AppRoutingModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "DEFAULT_NODE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/utilities/interfaces/Node.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Node",
                "defaultValue": "{\r\n  name: \"notes\",\r\n  nodes: [],\r\n  isDirectory: false,\r\n  expanded: false,\r\n  path: \".\"\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  prodcution: true,\r\n  current_directory: \"D:\\\\Sublime\",\r\n  init_file: {\r\n    path: \"D:\\\\Repo\\\\personal_repos\\\\rusty\\\\rusty-notepad\\\\dodo.py\",\r\n    file_name: \"dodo.py\"\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  prodcution: true,\r\n  current_directory: \".\\\\\",\r\n  init_file: {\r\n    path: \"D:\\\\Repo\\\\personal_repos\\\\rusty\\\\rusty-notepad\\\\dodo.py\",\r\n    file_name: \"dodo.py\"\r\n  }\r\n}"
            },
            {
                "name": "NEW_TAB_DEFAULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/utilities/Constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Tab",
                "defaultValue": "{\r\nid: -1,\r\nisClosable: true,\r\nselected: true,\r\ntitle: \"New Tab\",\r\npath: \"\"\r\n}"
            }
        ],
        "functions": [
            {
                "name": "mapFileSystemItem2Node",
                "file": "src/app/modules/utilities/interfaces/Node.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fileSystemItem",
                        "type": "FileSystemItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Node",
                "jsdoctags": [
                    {
                        "name": "fileSystemItem",
                        "type": "FileSystemItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapFileSystemItem2NodeList",
                "file": "src/app/modules/utilities/interfaces/Node.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fileSystemItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parent_node",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Node[]",
                "jsdoctags": [
                    {
                        "name": "fileSystemItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parent_node",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "AppEvents",
                "childs": [
                    {
                        "name": "TAB_CHANGE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TAB_CREATE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TAB_DELETE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TABS_EMPTY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "WORKPAD_UPDATE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "WORKPAD_SAVE_REQUEST",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "WORKPAD_SAVE_RESPONSE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FILE_SYSTEM_OPEN",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FILE_SYSTEM_READ",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/utilities/interfaces/Events.ts"
            }
        ],
        "groupedVariables": {
            "src/app/modules/utilities/interfaces/Node.ts": [
                {
                    "name": "DEFAULT_NODE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/utilities/interfaces/Node.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node",
                    "defaultValue": "{\r\n  name: \"notes\",\r\n  nodes: [],\r\n  isDirectory: false,\r\n  expanded: false,\r\n  path: \".\"\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  prodcution: true,\r\n  current_directory: \"D:\\\\Sublime\",\r\n  init_file: {\r\n    path: \"D:\\\\Repo\\\\personal_repos\\\\rusty\\\\rusty-notepad\\\\dodo.py\",\r\n    file_name: \"dodo.py\"\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  prodcution: true,\r\n  current_directory: \".\\\\\",\r\n  init_file: {\r\n    path: \"D:\\\\Repo\\\\personal_repos\\\\rusty\\\\rusty-notepad\\\\dodo.py\",\r\n    file_name: \"dodo.py\"\r\n  }\r\n}"
                }
            ],
            "src/app/modules/utilities/Constants.ts": [
                {
                    "name": "NEW_TAB_DEFAULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/utilities/Constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tab",
                    "defaultValue": "{\r\nid: -1,\r\nisClosable: true,\r\nselected: true,\r\ntitle: \"New Tab\",\r\npath: \"\"\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/modules/utilities/interfaces/Node.ts": [
                {
                    "name": "mapFileSystemItem2Node",
                    "file": "src/app/modules/utilities/interfaces/Node.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fileSystemItem",
                            "type": "FileSystemItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Node",
                    "jsdoctags": [
                        {
                            "name": "fileSystemItem",
                            "type": "FileSystemItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapFileSystemItem2NodeList",
                    "file": "src/app/modules/utilities/interfaces/Node.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fileSystemItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent_node",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Node[]",
                    "jsdoctags": [
                        {
                            "name": "fileSystemItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent_node",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/modules/utilities/interfaces/Events.ts": [
                {
                    "name": "AppEvents",
                    "childs": [
                        {
                            "name": "TAB_CHANGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TAB_CREATE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TAB_DELETE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TABS_EMPTY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "WORKPAD_UPDATE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "WORKPAD_SAVE_REQUEST",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "WORKPAD_SAVE_RESPONSE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FILE_SYSTEM_OPEN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FILE_SYSTEM_READ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/utilities/interfaces/Events.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/directives/autofocus/autofocus.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutofocusDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/directives/resizer/resizer.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ResizerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/directives/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/folder-tree/folder-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FolderTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/folder-tree/folder-tree.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FolderTreeService",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "src/app/modules/ui-elements/folder-tree/folder/folder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FolderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/horizontal-bar/horizontal-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/landing-page/landing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/rusty-view/rusty-vew.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ViewService",
                "coveragePercent": 31,
                "coverageCount": "5/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/modules/ui-elements/rusty-view/rusty-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RustyViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/splitter/splitter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SplitterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 55,
                "coverageCount": "10/18",
                "status": "good"
            },
            {
                "filePath": "src/app/modules/ui-elements/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/ui-elements/workpad/workpad.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WorkpadComponent",
                "coveragePercent": 52,
                "coverageCount": "9/17",
                "status": "good"
            },
            {
                "filePath": "src/app/modules/utilities/Constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NEW_TAB_DEFAULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotepadEvents",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Node.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "File",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Node.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileSystemItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Node.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Node",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Node.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapFileSystemItem2Node",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Node.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapFileSystemItem2NodeList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Node.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_NODE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/utilities/interfaces/Tab.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tab",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}